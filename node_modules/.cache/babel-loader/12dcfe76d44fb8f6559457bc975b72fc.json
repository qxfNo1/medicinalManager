{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/cascader/style\";\nimport _Cascader from \"antd/es/cascader\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"D:\\\\studyFiles\\\\\\u524D\\u7AEF\\\\react-guli\\\\code\\\\admin-client_final\\\\src\\\\pages\\\\product\\\\add-update.jsx\";\nimport React, { PureComponent } from 'react';\nimport PicturesWall from './pictures-wall';\nimport RichTextEditor from './rich-text-editor';\nimport LinkButton from '../../components/link-button';\nimport { reqCategorys, reqAddOrUpdateProduct } from '../../api';\nconst {\n  Item\n} = _Form;\nconst {\n  TextArea\n} = _Input;\n/*\nProduct的添加和更新的子路由组件\n */\n\nclass ProductAddUpdate extends PureComponent {\n  constructor(props) {\n    super(props); // 创建用来保存ref标识的标签对象的容器\n\n    this.state = {\n      options: []\n    };\n\n    this.initOptions = async categorys => {\n      // 根据categorys生成options数组\n      const options = categorys.map(c => ({\n        value: c._id,\n        label: c.name,\n        isLeaf: false // 不是叶子\n\n      })); // 如果是一个二级分类商品的更新\n\n      const {\n        isUpdate,\n        product\n      } = this;\n      const {\n        pCategoryId\n      } = product;\n\n      if (isUpdate && pCategoryId !== '0') {\n        // 获取对应的二级分类列表\n        const subCategorys = await this.getCategorys(pCategoryId); // 生成二级下拉列表的options\n\n        const childOptions = subCategorys.map(c => ({\n          value: c._id,\n          label: c.name,\n          isLeaf: true\n        })); // 找到当前商品对应的一级option对象\n\n        const targetOption = options.find(option => option.value === pCategoryId); // 关联对应的一级option上\n\n        targetOption.children = childOptions;\n      } // 更新options状态\n\n\n      this.setState({\n        options\n      });\n    };\n\n    this.getCategorys = async parentId => {\n      const result = await reqCategorys(parentId); // {status: 0, data: categorys}\n\n      if (result.status === 0) {\n        const categorys = result.data; // 如果是一级分类列表\n\n        if (parentId === '0') {\n          this.initOptions(categorys);\n        } else {\n          // 二级列表\n          return categorys; // 返回二级列表 ==> 当前async函数返回的promsie就会成功且value为categorys\n        }\n      }\n    };\n\n    this.validatePrice = (rule, value, callback) => {\n      console.log(value, typeof value);\n\n      if (value * 1 > 0) {\n        callback(); // 验证通过\n      } else {\n        callback('价格必须大于0'); // 验证没通过\n      }\n    };\n\n    this.loadData = async selectedOptions => {\n      // 得到选择的option对象\n      const targetOption = selectedOptions[0]; // 显示loading\n\n      targetOption.loading = true; // 根据选中的分类, 请求获取二级分类列表\n\n      const subCategorys = await this.getCategorys(targetOption.value); // 隐藏loading\n\n      targetOption.loading = false; // 二级分类数组有数据\n\n      if (subCategorys && subCategorys.length > 0) {\n        // 生成一个二级列表的options\n        const childOptions = subCategorys.map(c => ({\n          value: c._id,\n          label: c.name,\n          isLeaf: true\n        })); // 关联到当前option上\n\n        targetOption.children = childOptions;\n      } else {\n        // 当前选中的分类没有二级分类\n        targetOption.isLeaf = true;\n      } // 更新options状态\n\n\n      this.setState({\n        options: [...this.state.options]\n      });\n    };\n\n    this.submit = () => {\n      // 进行表单验证, 如果通过了, 才发送请求\n      this.props.form.validateFields(async (error, values) => {\n        if (!error) {\n          // 1. 收集数据, 并封装成product对象\n          const {\n            name,\n            desc,\n            price,\n            categoryIds\n          } = values;\n          let pCategoryId, categoryId;\n\n          if (categoryIds.length === 1) {\n            pCategoryId = '0';\n            categoryId = categoryIds[0];\n          } else {\n            pCategoryId = categoryIds[0];\n            categoryId = categoryIds[1];\n          }\n\n          const imgs = this.pw.current.getImgs();\n          const detail = this.editor.current.getDetail();\n          const product = {\n            name,\n            desc,\n            price,\n            imgs,\n            detail,\n            pCategoryId,\n            categoryId\n          }; // 如果是更新, 需要添加_id\n\n          if (this.isUpdate) {\n            product._id = this.product._id;\n          } // 2. 调用接口请求函数去添加/更新\n\n\n          const result = await reqAddOrUpdateProduct(product); // 3. 根据结果提示\n\n          if (result.status === 0) {\n            _message.success(`${this.isUpdate ? '更新' : '添加'}商品成功!`);\n\n            this.props.history.goBack();\n          } else {\n            _message.error(`${this.isUpdate ? '更新' : '添加'}商品失败!`);\n          }\n        }\n      });\n    };\n\n    this.pw = React.createRef();\n    this.editor = React.createRef();\n  }\n\n  componentDidMount() {\n    this.getCategorys('0');\n  }\n\n  componentWillMount() {\n    // 取出携带的state\n    const product = this.props.location.state; // 如果是添加没值, 否则有值\n    // 保存是否是更新的标识\n\n    this.isUpdate = !!product; // 保存商品(如果没有, 保存是{})\n\n    this.product = product || {};\n  }\n\n  render() {\n    const {\n      isUpdate,\n      product\n    } = this;\n    const {\n      pCategoryId,\n      categoryId,\n      imgs,\n      detail\n    } = product; // 用来接收级联分类ID的数组\n\n    const categoryIds = [];\n\n    if (isUpdate) {\n      // 商品是一个一级分类的商品\n      if (pCategoryId === '0') {\n        categoryIds.push(categoryId);\n      } else {\n        // 商品是一个二级分类的商品\n        categoryIds.push(pCategoryId);\n        categoryIds.push(categoryId);\n      }\n    } // 指定Item布局的配置对象\n\n\n    const formItemLayout = {\n      labelCol: {\n        span: 2\n      },\n      // 左侧label的宽度\n      wrapperCol: {\n        span: 8\n      } // 右侧包裹的宽度\n\n    }; // 头部左侧标题\n\n    const title = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LinkButton, {\n      onClick: () => this.props.history.goBack(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(_Icon, {\n      type: \"arrow-left\",\n      style: {\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, isUpdate ? '修改商品' : '添加商品'));\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/React.createElement(_Card, {\n      title: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_Form, Object.assign({}, formItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Item, {\n      label: \"\\u5546\\u54C1\\u540D\\u79F0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, getFieldDecorator('name', {\n      initialValue: product.name,\n      rules: [{\n        required: true,\n        message: '必须输入商品名称'\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u540D\\u79F0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 18\n      }\n    }))), /*#__PURE__*/React.createElement(Item, {\n      label: \"\\u5546\\u54C1\\u63CF\\u8FF0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, getFieldDecorator('desc', {\n      initialValue: product.desc,\n      rules: [{\n        required: true,\n        message: '必须输入商品描述'\n      }]\n    })( /*#__PURE__*/React.createElement(TextArea, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u63CF\\u8FF0\",\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 18\n      }\n    }))), /*#__PURE__*/React.createElement(Item, {\n      label: \"\\u5546\\u54C1\\u4EF7\\u683C\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }, getFieldDecorator('price', {\n      initialValue: product.price,\n      rules: [{\n        required: true,\n        message: '必须输入商品价格'\n      }, {\n        validator: this.validatePrice\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      type: \"number\",\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u4EF7\\u683C\",\n      addonAfter: \"\\u5143\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 18\n      }\n    }))), /*#__PURE__*/React.createElement(Item, {\n      label: \"\\u5546\\u54C1\\u5206\\u7C7B\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    }, getFieldDecorator('categoryIds', {\n      initialValue: categoryIds,\n      rules: [{\n        required: true,\n        message: '必须指定商品分类'\n      }]\n    })( /*#__PURE__*/React.createElement(_Cascader, {\n      placeholder: \"\\u8BF7\\u6307\\u5B9A\\u5546\\u54C1\\u5206\\u7C7B\",\n      options: this.state.options\n      /*需要显示的列表数据数组*/\n      ,\n      loadData: this.loadData\n      /*当选择某个列表项, 加载下一级列表的监听回调*/\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Item, {\n      label: \"\\u5546\\u54C1\\u56FE\\u7247\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(PicturesWall, {\n      ref: this.pw,\n      imgs: imgs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Item, {\n      label: \"\\u5546\\u54C1\\u8BE6\\u60C5\",\n      labelCol: {\n        span: 2\n      },\n      wrapperCol: {\n        span: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RichTextEditor, {\n      ref: this.editor,\n      detail: detail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      onClick: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }, \"\\u63D0\\u4EA4\"))));\n  }\n\n}\n\nexport default _Form.create()(ProductAddUpdate);\n/*\n1. 子组件调用父组件的方法: 将父组件的方法以函数属性的形式传递给子组件, 子组件就可以调用\n2. 父组件调用子组件的方法: 在父组件中通过ref得到子组件标签对象(也就是组件对象), 调用其方法\n */\n\n/*\n使用ref\n1. 创建ref容器: thi.pw = React.createRef()\n2. 将ref容器交给需要获取的标签元素: <PictureWall ref={this.pw} />\n3. 通过ref容器读取标签元素: this.pw.current\n */","map":{"version":3,"sources":["D:/studyFiles/前端/react-guli/code/admin-client_final/src/pages/product/add-update.jsx"],"names":["React","PureComponent","PicturesWall","RichTextEditor","LinkButton","reqCategorys","reqAddOrUpdateProduct","Item","TextArea","ProductAddUpdate","constructor","props","state","options","initOptions","categorys","map","c","value","_id","label","name","isLeaf","isUpdate","product","pCategoryId","subCategorys","getCategorys","childOptions","targetOption","find","option","children","setState","parentId","result","status","data","validatePrice","rule","callback","console","log","loadData","selectedOptions","loading","length","submit","form","validateFields","error","values","desc","price","categoryIds","categoryId","imgs","pw","current","getImgs","detail","editor","getDetail","success","history","goBack","createRef","componentDidMount","componentWillMount","location","render","push","formItemLayout","labelCol","span","wrapperCol","title","fontSize","getFieldDecorator","initialValue","rules","required","message","minRows","maxRows","validator","create"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react'\nimport {\n  Card,\n  Icon,\n  Form,\n  Input,\n  Cascader,\n  Button,\n  message\n} from 'antd'\n\nimport PicturesWall from './pictures-wall'\nimport RichTextEditor from './rich-text-editor'\nimport LinkButton from '../../components/link-button'\nimport {reqCategorys, reqAddOrUpdateProduct} from '../../api'\n\nconst {Item} = Form\nconst { TextArea } = Input\n\n/*\nProduct的添加和更新的子路由组件\n */\nclass ProductAddUpdate extends PureComponent {\n\n  state = {\n    options: [],\n  }\n\n  constructor (props) {\n    super(props)\n\n    // 创建用来保存ref标识的标签对象的容器\n    this.pw = React.createRef()\n    this.editor = React.createRef()\n  }\n\n  initOptions = async (categorys) => {\n    // 根据categorys生成options数组\n    const options = categorys.map(c => ({\n      value: c._id,\n      label: c.name,\n      isLeaf: false, // 不是叶子\n    }))\n\n    // 如果是一个二级分类商品的更新\n    const {isUpdate, product} = this\n    const {pCategoryId} = product\n    if(isUpdate && pCategoryId!=='0') {\n      // 获取对应的二级分类列表\n      const subCategorys = await this.getCategorys(pCategoryId)\n      // 生成二级下拉列表的options\n      const childOptions = subCategorys.map(c => ({\n        value: c._id,\n        label: c.name,\n        isLeaf: true\n      }))\n\n      // 找到当前商品对应的一级option对象\n      const targetOption = options.find(option => option.value===pCategoryId)\n\n      // 关联对应的一级option上\n      targetOption.children = childOptions\n    }\n\n\n    // 更新options状态\n    this.setState({\n      options\n    })\n  }\n\n  /*\n  异步获取一级/二级分类列表, 并显示\n  async函数的返回值是一个新的promise对象, promise的结果和值由async的结果来决定\n   */\n  getCategorys = async (parentId) => {\n    const result = await reqCategorys(parentId)   // {status: 0, data: categorys}\n    if (result.status===0) {\n      const categorys = result.data\n      // 如果是一级分类列表\n      if (parentId==='0') {\n        this.initOptions(categorys)\n      } else { // 二级列表\n        return categorys  // 返回二级列表 ==> 当前async函数返回的promsie就会成功且value为categorys\n      }\n    }\n  }\n\n\n  /*\n  验证价格的自定义验证函数\n   */\n  validatePrice = (rule, value, callback) => {\n    console.log(value, typeof value)\n    if (value*1 > 0) {\n      callback() // 验证通过\n    } else {\n      callback('价格必须大于0') // 验证没通过\n    }\n  }\n\n  /*\n  用加载下一级列表的回调函数\n   */\n  loadData = async selectedOptions => {\n    // 得到选择的option对象\n    const targetOption = selectedOptions[0]\n    // 显示loading\n    targetOption.loading = true\n\n    // 根据选中的分类, 请求获取二级分类列表\n    const subCategorys = await this.getCategorys(targetOption.value)\n    // 隐藏loading\n    targetOption.loading = false\n    // 二级分类数组有数据\n    if (subCategorys && subCategorys.length>0) {\n      // 生成一个二级列表的options\n      const childOptions = subCategorys.map(c => ({\n        value: c._id,\n        label: c.name,\n        isLeaf: true\n      }))\n      // 关联到当前option上\n      targetOption.children = childOptions\n    } else { // 当前选中的分类没有二级分类\n      targetOption.isLeaf = true\n    }\n\n    // 更新options状态\n    this.setState({\n      options: [...this.state.options],\n    })\n  }\n\n  submit = () => {\n    // 进行表单验证, 如果通过了, 才发送请求\n    this.props.form.validateFields(async (error, values) => {\n      if (!error) {\n\n        // 1. 收集数据, 并封装成product对象\n        const {name, desc, price, categoryIds} = values\n        let pCategoryId, categoryId\n        if (categoryIds.length===1) {\n          pCategoryId = '0'\n          categoryId = categoryIds[0]\n        } else {\n          pCategoryId = categoryIds[0]\n          categoryId = categoryIds[1]\n        }\n        const imgs = this.pw.current.getImgs()\n        const detail = this.editor.current.getDetail()\n\n        const product = {name, desc, price, imgs, detail, pCategoryId, categoryId}\n\n        // 如果是更新, 需要添加_id\n        if(this.isUpdate) {\n          product._id = this.product._id\n        }\n\n        // 2. 调用接口请求函数去添加/更新\n        const result = await reqAddOrUpdateProduct(product)\n\n        // 3. 根据结果提示\n        if (result.status===0) {\n          message.success(`${this.isUpdate ? '更新' : '添加'}商品成功!`)\n          this.props.history.goBack()\n        } else {\n          message.error(`${this.isUpdate ? '更新' : '添加'}商品失败!`)\n        }\n      }\n    })\n  }\n\n  componentDidMount () {\n    this.getCategorys('0')\n  }\n\n  componentWillMount () {\n    // 取出携带的state\n    const product = this.props.location.state  // 如果是添加没值, 否则有值\n    // 保存是否是更新的标识\n    this.isUpdate = !!product\n    // 保存商品(如果没有, 保存是{})\n    this.product = product || {}\n  }\n\n  render() {\n\n    const {isUpdate, product} = this\n    const {pCategoryId, categoryId, imgs, detail} = product\n    // 用来接收级联分类ID的数组\n    const categoryIds = []\n    if(isUpdate) {\n      // 商品是一个一级分类的商品\n      if(pCategoryId==='0') {\n        categoryIds.push(categoryId)\n      } else {\n        // 商品是一个二级分类的商品\n        categoryIds.push(pCategoryId)\n        categoryIds.push(categoryId)\n      }\n    }\n\n    // 指定Item布局的配置对象\n    const formItemLayout = {\n      labelCol: { span: 2 },  // 左侧label的宽度\n      wrapperCol: { span: 8 }, // 右侧包裹的宽度\n    }\n\n    // 头部左侧标题\n    const title = (\n      <span>\n        <LinkButton onClick={() => this.props.history.goBack()}>\n          <Icon type='arrow-left' style={{fontSize: 20}}/>\n        </LinkButton>\n        <span>{isUpdate ? '修改商品' : '添加商品'}</span>\n      </span>\n    )\n\n    const {getFieldDecorator} = this.props.form\n\n    return (\n      <Card title={title}>\n        <Form {...formItemLayout}>\n          <Item label=\"商品名称\">\n            {\n              getFieldDecorator('name', {\n                initialValue: product.name,\n                rules: [\n                  {required: true, message: '必须输入商品名称'}\n                ]\n              })(<Input placeholder='请输入商品名称'/>)\n            }\n          </Item>\n          <Item label=\"商品描述\">\n            {\n              getFieldDecorator('desc', {\n                initialValue: product.desc,\n                rules: [\n                  {required: true, message: '必须输入商品描述'}\n                ]\n              })(<TextArea placeholder=\"请输入商品描述\" autosize={{ minRows: 2, maxRows: 6 }} />)\n            }\n\n          </Item>\n          <Item label=\"商品价格\">\n\n            {\n              getFieldDecorator('price', {\n                initialValue: product.price,\n                rules: [\n                  {required: true, message: '必须输入商品价格'},\n                  {validator: this.validatePrice}\n                ]\n              })(<Input type='number' placeholder='请输入商品价格' addonAfter='元'/>)\n            }\n          </Item>\n          <Item label=\"商品分类\">\n            {\n              getFieldDecorator('categoryIds', {\n                initialValue: categoryIds,\n                rules: [\n                  {required: true, message: '必须指定商品分类'},\n                ]\n              })(\n                <Cascader\n                  placeholder='请指定商品分类'\n                  options={this.state.options}  /*需要显示的列表数据数组*/\n                  loadData={this.loadData} /*当选择某个列表项, 加载下一级列表的监听回调*/\n                />\n              )\n            }\n\n          </Item>\n          <Item label=\"商品图片\">\n            <PicturesWall ref={this.pw} imgs={imgs}/>\n          </Item>\n          <Item label=\"商品详情\" labelCol={{span: 2}} wrapperCol={{span: 20}}>\n            <RichTextEditor ref={this.editor} detail={detail}/>\n          </Item>\n          <Item>\n            <Button type='primary' onClick={this.submit}>提交</Button>\n          </Item>\n        </Form>\n      </Card>\n    )\n  }\n}\n\nexport default Form.create()(ProductAddUpdate)\n\n\n/*\n1. 子组件调用父组件的方法: 将父组件的方法以函数属性的形式传递给子组件, 子组件就可以调用\n2. 父组件调用子组件的方法: 在父组件中通过ref得到子组件标签对象(也就是组件对象), 调用其方法\n */\n\n/*\n使用ref\n1. 创建ref容器: thi.pw = React.createRef()\n2. 将ref容器交给需要获取的标签元素: <PictureWall ref={this.pw} />\n3. 通过ref容器读取标签元素: this.pw.current\n */"]},"metadata":{},"sourceType":"module"}