{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"D:\\\\studyFiles\\\\\\u524D\\u7AEF\\\\react-guli\\\\code\\\\admin-client_final\\\\src\\\\pages\\\\login\\\\login.jsx\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './login.less';\nimport logo from '../../assets/images/logo.png';\nimport { reqLogin } from '../../api';\nimport memoryUtils from '../../utils/memoryUtils';\nimport storageUtils from '../../utils/storageUtils';\nconst Item = _Form.Item; // 不能写在import之前\n\n/*\n登陆的路由组件\n */\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = event => {\n      // 阻止事件的默认行为\n      event.preventDefault(); // 对所有表单字段进行检验\n\n      this.props.form.validateFields(async (err, values) => {\n        // 检验成功\n        if (!err) {\n          // console.log('提交登陆的ajax请求', values)\n          // 请求登陆\n          const {\n            username,\n            password\n          } = values;\n          const result = await reqLogin(username, password); // {status: 0, data: user}  {status: 1, msg: 'xxx'}\n          // console.log('请求成功', result)\n\n          if (result.status === 0) {\n            // 登陆成功\n            // 提示登陆成功\n            _message.success('登陆成功'); // 保存user\n\n\n            const user = result.data;\n            memoryUtils.user = user; // 保存在内存中\n\n            storageUtils.saveUser(user); // 保存到local中\n            // 跳转到管理界面 (不需要再回退回到登陆)\n\n            this.props.history.replace('/');\n          } else {\n            // 登陆失败\n            // 提示错误信息\n            _message.error(result.msg);\n          }\n        } else {\n          console.log('检验失败!');\n        }\n      }); // 得到form对象\n      // const form = this.props.form\n      // // 获取表单项的输入数据\n      // const values = form.getFieldsValue()\n      // console.log('handleSubmit()', values)\n    };\n\n    this.validatePwd = (rule, value, callback) => {\n      console.log('validatePwd()', rule, value);\n\n      if (!value) {\n        callback('密码必须输入');\n      } else if (value.length < 4) {\n        callback('密码长度不能小于4位');\n      } else if (value.length > 12) {\n        callback('密码长度不能大于12位');\n      } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n        callback('密码必须是英文、数字或下划线组成');\n      } else {\n        callback(); // 验证通过\n      } // callback('xxxx') // 验证失败, 并指定提示的文本\n\n    };\n  }\n\n  render() {\n    // 如果用户已经登陆, 自动跳转到管理界面\n    const user = memoryUtils.user;\n\n    if (user && user._id) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 14\n        }\n      });\n    } // 得到具强大功能的form对象\n\n\n    const form = this.props.form;\n    const {\n      getFieldDecorator\n    } = form;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"login-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"React\\u9879\\u76EE: \\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\")), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"login-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"\\u7528\\u6237\\u767B\\u9646\"), /*#__PURE__*/React.createElement(_Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, getFieldDecorator('username', {\n      // 配置对象: 属性名是特定的一些名称\n      // 声明式验证: 直接使用别人定义好的验证规则进行验证\n      rules: [{\n        required: true,\n        whitespace: true,\n        message: '用户名必须输入'\n      }, {\n        min: 4,\n        message: '用户名至少4位'\n      }, {\n        max: 12,\n        message: '用户名最多12位'\n      }, {\n        pattern: /^[a-zA-Z0-9_]+$/,\n        message: '用户名必须是英文、数字或下划线组成'\n      }],\n      initialValue: 'admin' // 初始值\n\n    })( /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }\n      }),\n      placeholder: \"\\u7528\\u6237\\u540D\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(_Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        validator: this.validatePwd\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      }),\n      type: \"password\",\n      placeholder: \"\\u5BC6\\u7801\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(_Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"\\u767B\\u9646\")))));\n  }\n\n}\n/*\n1. 高阶函数\n    1). 一类特别的函数\n        a. 接受函数类型的参数\n        b. 返回值是函数\n    2). 常见\n        a. 定时器: setTimeout()/setInterval()\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\n        d. 函数对象的bind()\n        e. Form.create()() / getFieldDecorator()()\n    3). 高阶函数更新动态, 更加具有扩展性\n\n2. 高阶组件\n    1). 本质就是一个函数\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\n    3). 作用: 扩展组件的功能\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\n */\n\n/*\n包装Form组件生成一个新的组件: Form(Login)\n新组件会向Form组件传递一个强大的对象属性: form\n */\n\n\nconst WrapLogin = _Form.create()(Login);\n\nexport default WrapLogin;\n/*\n1. 前台表单验证\n2. 收集表单输入数据\n */\n\n/*\nasync和await\n1. 作用?\n   简化promise对象的使用: 不用再使用then()来指定成功/失败的回调函数\n   以同步编码(没有回调函数了)方式实现异步流程\n2. 哪里写await?\n    在返回promise的表达式左侧写await: 不想要promise, 想要promise异步执行的成功的value数据\n3. 哪里写async?\n    await所在函数(最近的)定义的左侧写async\n */","map":{"version":3,"sources":["D:/studyFiles/前端/react-guli/code/admin-client_final/src/pages/login/login.jsx"],"names":["React","Component","Redirect","logo","reqLogin","memoryUtils","storageUtils","Item","Login","handleSubmit","event","preventDefault","props","form","validateFields","err","values","username","password","result","status","success","user","data","saveUser","history","replace","error","msg","console","log","validatePwd","rule","value","callback","length","test","render","_id","getFieldDecorator","rules","required","whitespace","message","min","max","pattern","initialValue","color","validator","WrapLogin","create"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {Redirect} from 'react-router-dom'\nimport {\n  Form,\n  Icon,\n  Input,\n  Button,\n  message\n} from 'antd'\nimport './login.less'\nimport logo from '../../assets/images/logo.png'\nimport {reqLogin} from '../../api'\nimport memoryUtils from '../../utils/memoryUtils'\nimport storageUtils from '../../utils/storageUtils'\n\n\nconst Item = Form.Item // 不能写在import之前\n\n\n/*\n登陆的路由组件\n */\nclass Login extends Component {\n\n  handleSubmit = (event) => {\n\n    // 阻止事件的默认行为\n    event.preventDefault()\n\n    // 对所有表单字段进行检验\n    this.props.form.validateFields(async (err, values) => {\n      // 检验成功\n      if (!err) {\n        // console.log('提交登陆的ajax请求', values)\n        // 请求登陆\n        const {username, password} = values\n        const result = await reqLogin(username, password) // {status: 0, data: user}  {status: 1, msg: 'xxx'}\n        // console.log('请求成功', result)\n        if (result.status===0) { // 登陆成功\n          // 提示登陆成功\n          message.success('登陆成功')\n\n          // 保存user\n          const user = result.data\n          memoryUtils.user = user // 保存在内存中\n          storageUtils.saveUser(user) // 保存到local中\n\n          // 跳转到管理界面 (不需要再回退回到登陆)\n          this.props.history.replace('/')\n\n        } else { // 登陆失败\n          // 提示错误信息\n          message.error(result.msg)\n        }\n\n      } else {\n        console.log('检验失败!')\n      }\n    });\n\n    // 得到form对象\n    // const form = this.props.form\n    // // 获取表单项的输入数据\n    // const values = form.getFieldsValue()\n    // console.log('handleSubmit()', values)\n  }\n\n  /*\n  对密码进行自定义验证\n  */\n  /*\n   用户名/密码的的合法性要求\n     1). 必须输入\n     2). 必须大于等于4位\n     3). 必须小于等于12位\n     4). 必须是英文、数字或下划线组成\n    */\n  validatePwd = (rule, value, callback) => {\n    console.log('validatePwd()', rule, value)\n    if(!value) {\n      callback('密码必须输入')\n    } else if (value.length<4) {\n      callback('密码长度不能小于4位')\n    } else if (value.length>12) {\n      callback('密码长度不能大于12位')\n    } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n      callback('密码必须是英文、数字或下划线组成')\n    } else {\n      callback() // 验证通过\n    }\n    // callback('xxxx') // 验证失败, 并指定提示的文本\n  }\n\n  render () {\n\n    // 如果用户已经登陆, 自动跳转到管理界面\n    const user = memoryUtils.user\n    if(user && user._id) {\n      return <Redirect to='/'/>\n    }\n\n    // 得到具强大功能的form对象\n    const form = this.props.form\n    const { getFieldDecorator } = form;\n\n    return (\n      <div className=\"login\">\n        <header className=\"login-header\">\n          <img src={logo} alt=\"logo\"/>\n          <h1>React项目: 后台管理系统</h1>\n        </header>\n        <section className=\"login-content\">\n          <h2>用户登陆</h2>\n          <Form onSubmit={this.handleSubmit} className=\"login-form\">\n            <Item>\n              {\n                /*\n              用户名/密码的的合法性要求\n                1). 必须输入\n                2). 必须大于等于4位\n                3). 必须小于等于12位\n                4). 必须是英文、数字或下划线组成\n               */\n              }\n              {\n                getFieldDecorator('username', { // 配置对象: 属性名是特定的一些名称\n                  // 声明式验证: 直接使用别人定义好的验证规则进行验证\n                  rules: [\n                    { required: true, whitespace: true, message: '用户名必须输入' },\n                    { min: 4, message: '用户名至少4位' },\n                    { max: 12, message: '用户名最多12位' },\n                    { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文、数字或下划线组成' },\n                  ],\n                  initialValue: 'admin', // 初始值\n                })(\n                  <Input\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                    placeholder=\"用户名\"\n                  />\n                )\n              }\n            </Item>\n            <Form.Item>\n              {\n                getFieldDecorator('password', {\n                  rules: [\n                    {\n                      validator: this.validatePwd\n                    }\n                  ]\n                })(\n                  <Input\n                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                    type=\"password\"\n                    placeholder=\"密码\"\n                  />\n                )\n              }\n\n            </Form.Item>\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                登陆\n              </Button>\n            </Form.Item>\n          </Form>\n        </section>\n      </div>\n    )\n  }\n}\n\n/*\n1. 高阶函数\n    1). 一类特别的函数\n        a. 接受函数类型的参数\n        b. 返回值是函数\n    2). 常见\n        a. 定时器: setTimeout()/setInterval()\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\n        d. 函数对象的bind()\n        e. Form.create()() / getFieldDecorator()()\n    3). 高阶函数更新动态, 更加具有扩展性\n\n2. 高阶组件\n    1). 本质就是一个函数\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\n    3). 作用: 扩展组件的功能\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\n */\n/*\n包装Form组件生成一个新的组件: Form(Login)\n新组件会向Form组件传递一个强大的对象属性: form\n */\nconst WrapLogin = Form.create()(Login)\nexport default WrapLogin\n/*\n1. 前台表单验证\n2. 收集表单输入数据\n */\n\n/*\nasync和await\n1. 作用?\n   简化promise对象的使用: 不用再使用then()来指定成功/失败的回调函数\n   以同步编码(没有回调函数了)方式实现异步流程\n2. 哪里写await?\n    在返回promise的表达式左侧写await: 不想要promise, 想要promise异步执行的成功的value数据\n3. 哪里写async?\n    await所在函数(最近的)定义的左侧写async\n */"]},"metadata":{},"sourceType":"module"}