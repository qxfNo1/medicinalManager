{"ast":null,"code":"import \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/tree/style\";\nimport _Tree from \"antd/es/tree\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"D:\\\\studyFiles\\\\\\u524D\\u7AEF\\\\react-guli\\\\code\\\\admin-client_final\\\\src\\\\pages\\\\role\\\\auth-form.jsx\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport menuList from '../../config/menuConfig';\nconst Item = _Form.Item;\nconst {\n  TreeNode\n} = _Tree;\n/*\n添加分类的form组件\n */\n\nexport default class AuthForm extends PureComponent {\n  constructor(props) {\n    super(props); // 根据传入角色的menus生成初始状态\n\n    this.getMenus = () => this.state.checkedKeys;\n\n    this.getTreeNodes = menuList => {\n      return menuList.reduce((pre, item) => {\n        pre.push( /*#__PURE__*/React.createElement(TreeNode, {\n          title: item.title,\n          key: item.key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 9\n          }\n        }, item.children ? this.getTreeNodes(item.children) : null));\n        return pre;\n      }, []);\n    };\n\n    this.onCheck = checkedKeys => {\n      console.log('onCheck', checkedKeys);\n      this.setState({\n        checkedKeys\n      });\n    };\n\n    const {\n      menus\n    } = this.props.role;\n    this.state = {\n      checkedKeys: menus\n    };\n  }\n  /*\n  为父组件提交获取最新menus数据的方法\n   */\n\n\n  componentWillMount() {\n    this.treeNodes = this.getTreeNodes(menuList);\n  } // 根据新传入的role来更新checkedKeys状态\n\n  /*\n  当组件接收到新的属性时自动调用\n   */\n\n\n  componentWillReceiveProps(nextProps) {\n    console.log('componentWillReceiveProps()', nextProps);\n    const menus = nextProps.role.menus;\n    this.setState({\n      checkedKeys: menus\n    }); // this.state.checkedKeys = menus\n  }\n\n  render() {\n    console.log('AuthForm render()');\n    const {\n      role\n    } = this.props;\n    const {\n      checkedKeys\n    } = this.state; // 指定Item布局的配置对象\n\n    const formItemLayout = {\n      labelCol: {\n        span: 4\n      },\n      // 左侧label的宽度\n      wrapperCol: {\n        span: 15\n      } // 右侧包裹的宽度\n\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Item, Object.assign({\n      label: \"\\u89D2\\u8272\\u540D\\u79F0\"\n    }, formItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(_Input, {\n      value: role.name,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(_Tree, {\n      checkable: true,\n      defaultExpandAll: true,\n      checkedKeys: checkedKeys,\n      onCheck: this.onCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TreeNode, {\n      title: \"\\u5E73\\u53F0\\u6743\\u9650\",\n      key: \"all\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, this.treeNodes)));\n  }\n\n}\nAuthForm.propTypes = {\n  role: PropTypes.object\n};","map":{"version":3,"sources":["D:/studyFiles/前端/react-guli/code/admin-client_final/src/pages/role/auth-form.jsx"],"names":["React","PureComponent","PropTypes","menuList","Item","TreeNode","AuthForm","constructor","props","getMenus","state","checkedKeys","getTreeNodes","reduce","pre","item","push","title","key","children","onCheck","console","log","setState","menus","role","componentWillMount","treeNodes","componentWillReceiveProps","nextProps","render","formItemLayout","labelCol","span","wrapperCol","name","propTypes","object"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Form,\n  Input,\n  Tree\n} from 'antd'\nimport menuList from '../../config/menuConfig'\n\nconst Item = Form.Item\n\nconst { TreeNode } = Tree;\n\n/*\n添加分类的form组件\n */\nexport default class AuthForm extends PureComponent {\n\n  static propTypes = {\n    role: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n\n    // 根据传入角色的menus生成初始状态\n    const {menus} = this.props.role\n    this.state = {\n      checkedKeys: menus\n    }\n  }\n\n  /*\n  为父组件提交获取最新menus数据的方法\n   */\n  getMenus = () => this.state.checkedKeys\n\n\n  getTreeNodes = (menuList) => {\n    return menuList.reduce((pre, item) => {\n      pre.push(\n        <TreeNode title={item.title} key={item.key}>\n          {item.children ? this.getTreeNodes(item.children) : null}\n        </TreeNode>\n      )\n      return pre\n    }, [])\n  }\n\n  // 选中某个node时的回调\n  onCheck = checkedKeys => {\n    console.log('onCheck', checkedKeys);\n    this.setState({ checkedKeys });\n  };\n\n\n  componentWillMount () {\n    this.treeNodes = this.getTreeNodes(menuList)\n  }\n\n  // 根据新传入的role来更新checkedKeys状态\n  /*\n  当组件接收到新的属性时自动调用\n   */\n  componentWillReceiveProps (nextProps) {\n    console.log('componentWillReceiveProps()', nextProps)\n    const menus = nextProps.role.menus\n    this.setState({\n      checkedKeys: menus\n    })\n    // this.state.checkedKeys = menus\n  }\n\n  render() {\n    console.log('AuthForm render()')\n    const {role} = this.props\n    const {checkedKeys} = this.state\n    // 指定Item布局的配置对象\n    const formItemLayout = {\n      labelCol: { span: 4 },  // 左侧label的宽度\n      wrapperCol: { span: 15 }, // 右侧包裹的宽度\n    }\n\n    return (\n      <div>\n        <Item label='角色名称' {...formItemLayout}>\n          <Input value={role.name} disabled/>\n        </Item>\n\n        <Tree\n          checkable\n          defaultExpandAll={true}\n          checkedKeys={checkedKeys}\n          onCheck={this.onCheck}\n        >\n          <TreeNode title=\"平台权限\" key=\"all\">\n            {this.treeNodes}\n          </TreeNode>\n        </Tree>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}