{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nvar _jsxFileName = \"D:\\\\studyFiles\\\\\\u524D\\u7AEF\\\\react-guli\\\\code\\\\admin-client_final\\\\src\\\\components\\\\header\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport LinkButton from '../link-button';\nimport { reqWeather } from '../../api';\nimport menuList from '../../config/menuConfig';\nimport { formateDate } from '../../utils/dateUtils';\nimport memoryUtils from '../../utils/memoryUtils';\nimport storageUtils from '../../utils/storageUtils';\nimport './index.less';\nimport weatherPic from \"../../assets/images/weather.png\";\n/*\n左侧导航的组件\n */\n\nclass Header extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentTime: formateDate(Date.now()),\n      // 当前时间字符串\n      dayPictureUrl: '',\n      // 天气图片url\n      weather: '' // 天气的文本\n\n    };\n\n    this.getTime = () => {\n      // 每隔1s获取当前时间, 并更新状态数据currentTime\n      this.intervalId = setInterval(() => {\n        const currentTime = formateDate(Date.now());\n        this.setState({\n          currentTime\n        });\n      }, 1000);\n    };\n\n    this.getWeather = async () => {\n      // 调用接口请求异步获取数据\n      const {\n        dayPictureUrl,\n        weather\n      } = await reqWeather('北京'); // 更新状态\n\n      this.setState({\n        dayPictureUrl,\n        weather\n      });\n    };\n\n    this.getTitle = () => {\n      // 得到当前请求路径\n      const path = this.props.location.pathname;\n      let title;\n      menuList.forEach(item => {\n        if (item.key === path) {\n          // 如果当前item对象的key与path一样,item的title就是需要显示的title\n          title = item.title;\n        } else if (item.children) {\n          // 在所有子item中查找匹配的\n          const cItem = item.children.find(cItem => path.indexOf(cItem.key) === 0); // 如果有值才说明有匹配的\n\n          if (cItem) {\n            // 取出它的title\n            title = cItem.title;\n          }\n        }\n      });\n      return title;\n    };\n\n    this.logout = () => {\n      // 显示确认框\n      _Modal.confirm({\n        content: '确定退出吗?',\n        onOk: () => {\n          console.log('OK', this); // 删除保存的user数据\n\n          storageUtils.removeUser();\n          memoryUtils.user = {}; // 跳转到login\n\n          this.props.history.replace('/login');\n        }\n      });\n    };\n  }\n\n  /*\n  第一次render()之后执行一次\n  一般在此执行异步操作: 发ajax请求/启动定时器\n   */\n  componentDidMount() {\n    // 获取当前的时间\n    this.getTime(); // 获取当前天气\n\n    this.getWeather();\n  }\n  /*\n  // 不能这么做: 不会更新显示\n  componentWillMount () {\n    this.title = this.getTitle()\n  }*/\n\n  /*\n  当前组件卸载之前调用\n   */\n\n\n  componentWillUnmount() {\n    // 清除定时器\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const {\n      currentTime,\n      dayPictureUrl,\n      weather\n    } = this.state;\n    const username = memoryUtils.user.username; // 得到当前需要显示的title\n\n    const title = this.getTitle();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, \"\\u6B22\\u8FCE, \", username), /*#__PURE__*/React.createElement(LinkButton, {\n      onClick: this.logout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"\\u9000\\u51FA\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-bottom-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-bottom-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, currentTime), /*#__PURE__*/React.createElement(\"img\", {\n      src: dayPictureUrl,\n      alt: \"weather\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, weather))));\n  }\n\n}\n\nexport default withRouter(Header);","map":{"version":3,"sources":["D:/studyFiles/前端/react-guli/code/admin-client_final/src/components/header/index.jsx"],"names":["React","Component","withRouter","LinkButton","reqWeather","menuList","formateDate","memoryUtils","storageUtils","weatherPic","Header","state","currentTime","Date","now","dayPictureUrl","weather","getTime","intervalId","setInterval","setState","getWeather","getTitle","path","props","location","pathname","title","forEach","item","key","children","cItem","find","indexOf","logout","confirm","content","onOk","console","log","removeUser","user","history","replace","componentDidMount","componentWillUnmount","clearInterval","render","username"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {withRouter} from 'react-router-dom'\nimport { Modal} from 'antd'\n\nimport LinkButton from '../link-button'\nimport {reqWeather} from '../../api'\nimport menuList from '../../config/menuConfig'\nimport {formateDate} from '../../utils/dateUtils'\nimport memoryUtils from '../../utils/memoryUtils'\nimport storageUtils from '../../utils/storageUtils'\nimport './index.less'\nimport weatherPic from \"../../assets/images/weather.png\"\n/*\n左侧导航的组件\n */\nclass Header extends Component {\n\n  state = {\n    currentTime: formateDate(Date.now()), // 当前时间字符串\n    dayPictureUrl: '', // 天气图片url\n    weather: '', // 天气的文本\n  }\n\n  getTime = () => {\n    // 每隔1s获取当前时间, 并更新状态数据currentTime\n    this.intervalId = setInterval(() => {\n      const currentTime = formateDate(Date.now())\n      this.setState({currentTime})\n    }, 1000)\n  }\n\n  getWeather = async () => {\n    // 调用接口请求异步获取数据\n    const {dayPictureUrl, weather} = await reqWeather('北京')\n    // 更新状态\n    this.setState({dayPictureUrl, weather})\n  }\n\n  getTitle = () => {\n    // 得到当前请求路径\n    const path = this.props.location.pathname\n    let title\n    menuList.forEach(item => {\n      if (item.key===path) { // 如果当前item对象的key与path一样,item的title就是需要显示的title\n        title = item.title\n      } else if (item.children) {\n        // 在所有子item中查找匹配的\n        const cItem = item.children.find(cItem => path.indexOf(cItem.key)===0)\n        // 如果有值才说明有匹配的\n        if(cItem) {\n          // 取出它的title\n          title = cItem.title\n        }\n      }\n    })\n    return title\n  }\n\n  /*\n  退出登陆\n   */\n  logout = () => {\n    // 显示确认框\n    Modal.confirm({\n      content: '确定退出吗?',\n      onOk: () => {\n        console.log('OK', this)\n        // 删除保存的user数据\n        storageUtils.removeUser()\n        memoryUtils.user = {}\n\n        // 跳转到login\n        this.props.history.replace('/login')\n      }\n    })\n  }\n\n  /*\n  第一次render()之后执行一次\n  一般在此执行异步操作: 发ajax请求/启动定时器\n   */\n  componentDidMount () {\n    // 获取当前的时间\n    this.getTime()\n    // 获取当前天气\n    this.getWeather()\n  }\n  /*\n  // 不能这么做: 不会更新显示\n  componentWillMount () {\n    this.title = this.getTitle()\n  }*/\n\n  /*\n  当前组件卸载之前调用\n   */\n  componentWillUnmount () {\n    // 清除定时器\n    clearInterval(this.intervalId)\n  }\n\n\n  render() {\n\n    const {currentTime, dayPictureUrl, weather} = this.state\n\n    const username = memoryUtils.user.username\n\n    // 得到当前需要显示的title\n    const title = this.getTitle()\n    return (\n      <div className=\"header\">\n        <div className=\"header-top\">\n          <span>欢迎, {username}</span>\n          <LinkButton onClick={this.logout}>退出</LinkButton>\n        </div>\n        <div className=\"header-bottom\">\n          <div className=\"header-bottom-left\">{title}</div>\n          <div className=\"header-bottom-right\">\n            <span>{currentTime}</span>\n            <img src={dayPictureUrl} alt=\"weather\"/>\n            <span>{weather}</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)"]},"metadata":{},"sourceType":"module"}